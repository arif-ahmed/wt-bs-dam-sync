// <auto-generated />
using System;
using BrandshareDamSync.Infrastructure.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrandShareDAMSync.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DamSyncDbContext))]
    [Migration("20250827145014_AddDeletionPolicies")]
    partial class AddDeletionPolicies
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("BrandshareDamSync.Domain.FileEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChecksumHash")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("DirectoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("FolderPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastModifiedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastSeenSyncId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("ModifiedAtEpochMs")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SizeInBytes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.HasIndex("TenantId");

                    b.ToTable("Files", (string)null);
                });

            modelBuilder.Entity("BrandshareDamSync.Domain.Folder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModifiedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastSeenSyncId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("IX_Folders_ParentId");

                    b.HasIndex("Path")
                        .HasDatabaseName("IX_Folders_Path");

                    b.HasIndex("TenantId");

                    b.ToTable("Folders", (string)null);
                });

            modelBuilder.Entity("BrandshareDamSync.Domain.SyncJob", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("DestinationPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DirectoryDeletionPolicy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FileDeletionPolicy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("JobIntervalMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JobStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastItemId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModifiedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("LastRunTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrimaryLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SyncDirection")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SyncJobStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VolumeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VolumeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VolumePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("BrandshareDamSync.Domain.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("BrandshareDamSync.Domain.FileEntity", b =>
                {
                    b.HasOne("BrandshareDamSync.Domain.Folder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("DirectoryId");

                    b.HasOne("BrandshareDamSync.Domain.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BrandshareDamSync.Domain.Folder", b =>
                {
                    b.HasOne("BrandshareDamSync.Domain.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BrandshareDamSync.Domain.SyncJob", b =>
                {
                    b.HasOne("BrandshareDamSync.Domain.Tenant", "Tenant")
                        .WithMany("Jobs")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("BrandshareDamSync.Domain.Folder", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("BrandshareDamSync.Domain.Tenant", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
